#!/usr/bin/python

import sys, os, os.path, string, glob, math
import random
import time
import tempfile
import subprocess

def usage(a):
    sys.stderr.write("usage: %s [options]\n")
    sys.stderr.write("       [ -load <expected-job-load> ] (def = 100)\n")
    sys.stderr.write("       [ -submitters <num-submitters> ] (def = 1)\n")
    sys.stderr.write("       [ -duration <job-duration-secs> ] (def = 60)\n")
    sys.stderr.write("       [ -duration-spread <spread-fraction> ] (def = 0.0001)\n")
    sys.stderr.write("       [ -interval <submit-interval-secs> ] (def = 30)\n")
    sys.stderr.write("       [ -interval-spread <spread-fraction> ] (def = 0.0001)\n")
    sys.stderr.write("       [ -reqs <requirements-expr> ]\n")
    sys.stderr.write("       [ -shell (def = don't use shell wrapper)\n")
    sys.stderr.write("       [ -err (def = no err output)\n")
    sys.stderr.write("       [ -std (def = no std output)\n")
    sys.stderr.write("       [ -log (def = no log output)\n")
    sys.exit(1)


argv = sys.argv
argc = len(argv)

fixedArgs = 0
if argc <= fixedArgs: usage(argv[0])

# fixed args


# option defaults
load = 100
duration = 60
duration_spread = 0.05
submitters = 1
interval = 30
interval_spread = 0.05
reqs = None
shell = False
err_out = False
std_out = False
log_out = False


# options
try:
    j = fixedArgs+1
    while j<argc:
        if sys.argv[j]=="-load":
            j+=1
            if j>=argc: usage(sys.argv[0])
            load = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-duration":
            j+=1
            if j>=argc: usage(sys.argv[0])
            duration = float(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-duration-spread":
            j+=1
            if j>=argc: usage(sys.argv[0])
            duration_spread = float(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-submitters":
            j+=1
            if j>=argc: usage(sys.argv[0])
            submitters = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-interval":
            j+=1
            if j>=argc: usage(sys.argv[0])
            interval = float(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-interval-spread":
            j+=1
            if j>=argc: usage(sys.argv[0])
            interval_spread = float(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-reqs":
            j+=1
            if j>=argc: usage(sys.argv[0])
            reqs = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-shell":
            shell = True
            j+=1
            continue
        if sys.argv[j]=="-err":
            err_out = True
            j+=1
            continue
        if sys.argv[j]=="-std":
            std_out = True
            j+=1
            continue
        if sys.argv[j]=="-log":
            log_out = True
            j+=1
            continue
        usage(argv[0])
except SystemExit:
    raise
except:
    usage(argv[0])

homedir = os.environ['HOME']

shcmd = ""
if shell:
    shcmd = "%s/bin/shcmd" % (homedir)
    if not os.path.exists(shcmd):
        print "Could not find %s" % (shcmd)
        sys.exit(1)

# batch size
BI = interval * float(load) / duration

jsub_dir = tempfile.mkdtemp(prefix='cjs_jsub_')
print "using temp dir %s for jsub files" % (jsub_dir)

nsub = 0
BC = 0.0
cumjobs = 0
t_prev = time.time()
t_0 = t_prev
while True:
    t_cur = time.time()

    #BC += BI
    #B = int(BC)
    #BC -= float(B)

    if (nsub > 0): elapsed = t_cur - t_prev
    else:          elapsed = interval
    t_prev = t_cur

    tcum = int(t_cur - t_0)
    if (tcum < 1): tcum = 1
    print "t= %d  tcum= %d  jcum= %d  cumrt= %f" % (int(t_cur), tcum, cumjobs, float(cumjobs)/float(tcum))  

    B = int(0.5 + (elapsed * float(load) / duration))

    # open a temporary submission file
    jsfile_name = "%s/s%04d.jsub" % (jsub_dir, nsub)
    print "preparing %d jobs in submission file: %s" % (B, jsfile_name)
    jsfile = open(jsfile_name, 'wb')

    # jsub "header" stuff
    jsfile.write("universe = vanilla\n")

    if shell:
        jsfile.write("cmd = %s\n", (shcmd))
    else:
        jsfile.write("cmd = /bin/sleep\n")
 
    jsfile.write("should_transfer_files = if_needed\n")
    jsfile.write("when_to_transfer_output = on_exit\n")

    if std_out:
        jsfile.write("output = %s/std.$(cluster).$(process)\n" % (jsub_dir))
    if err_out:
        jsfile.write("error = %s/err.$(cluster).$(process)\n" % (jsub_dir))
    if log_out:
        jsfile.write("log = %s/log.$(cluster).$(process)\n" % (jsub_dir))

    if reqs != None:
        jsfile.write("requirements = %s\n" % (reqs))

    for j in xrange(B):
        jdd = int((duration + random.uniform(-(duration * duration_spread), duration*duration_spread)))
        jsfile.write("+AccountingGroup = \"%s\"\n" % ("none.user%04d" % random.randint(0,submitters-1)))
        if shell:
            jsfile.write("args = /bin/sleep %d\n" % (jdd))
        else:
            jsfile.write("args = %d\n" % (jdd))
        jsfile.write("queue\n")

    jsfile.close()

    # submit the file
    print "submitting %d jobs via jsub file %s" % (B, jsfile_name)
    rc = subprocess.call(["condor_submit", jsfile_name])
    if rc == 0:
        print "submit was successful"
        cumjobs += B
    else:
        print "WARNING! submit failed with code %d" % rc

    # next submission
    nsub += 1

    s = int(interval + random.uniform(-(interval * interval_spread), interval * interval_spread))
    print "next submission in %d sec..." % (s)
    time.sleep(s)
