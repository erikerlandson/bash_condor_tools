#!/usr/bin/python

import sys, os, os.path, string, glob, math
import random
import time
import tempfile
import subprocess

def usage(a):
    sys.stderr.write("usage: %s [options]\n")
    sys.stderr.write("       [ -n <number-of-jobs> (def = 1)\n")
    sys.stderr.write("       [ -submitters <num-submitters> ] (def = 1)\n")
    sys.stderr.write("       [ -duration <job-duration-secs> ] (def = 60)\n")
    sys.stderr.write("       [ -reqs <requirements-expr> ]\n")
    sys.stderr.write("       [ -shell (def = don't use shell wrapper)\n")
    sys.stderr.write("       [ -err (def = no err output)\n")
    sys.stderr.write("       [ -std (def = no std output)\n")
    sys.stderr.write("       [ -log (def = no log output)\n")
    sys.exit(1)


argv = sys.argv
argc = len(argv)

fixedArgs = 0
if argc <= fixedArgs: usage(argv[0])

# fixed args


# option defaults
n = 1
duration = 60
submitters = 1
reqs = None
shell = False
err_out = False
std_out = False
log_out = False

# options
try:
    j = fixedArgs+1
    while j<argc:
        if sys.argv[j]=="-n":
            j+=1
            if j>=argc: usage(sys.argv[0])
            n = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-duration":
            j+=1
            if j>=argc: usage(sys.argv[0])
            duration = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-submitters":
            j+=1
            if j>=argc: usage(sys.argv[0])
            submitters = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-reqs":
            j+=1
            if j>=argc: usage(sys.argv[0])
            reqs = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-shell":
            shell = True
            j+=1
            continue
        if sys.argv[j]=="-err":
            err_out = True
            j+=1
            continue
        if sys.argv[j]=="-std":
            std_out = True
            j+=1
            continue
        if sys.argv[j]=="-log":
            log_out = True
            j+=1
            continue
        usage(argv[0])
except SystemExit:
    raise
except:
    usage(argv[0])

homedir = os.environ['HOME']

shcmd = ""
if shell:
    shcmd = "%s/bin/shcmd" % (homedir)
    if not os.path.exists(shcmd):
        print "Could not find %s" % (shcmd)
        sys.exit(1)

jsub_dir = tempfile.mkdtemp(prefix='cjs_jsub_')
print "using temp dir %s for jsub files" % (jsub_dir)

# open a temporary submission file
jsfile_name = "%s/cjs.jsub" % (jsub_dir)
print "preparing %d jobs in submission file: %s" % (n, jsfile_name)
jsfile = open(jsfile_name, 'wb')

# jsub "header" stuff
jsfile.write("universe = vanilla\n")

if shell:
    jsfile.write("cmd = %s\n" % (shcmd))
    jsfile.write("args = /bin/sleep %d\n" % (duration))
else:
    jsfile.write("cmd = /bin/sleep\n")
    jsfile.write("args = %d\n" % (duration))

if std_out:
    jsfile.write("output = %s/std.$(cluster).$(process)\n" % (jsub_dir))
if err_out:
    jsfile.write("error = %s/err.$(cluster).$(process)\n" % (jsub_dir))
if log_out:
    jsfile.write("log = %s/log.$(cluster).$(process)\n" % (jsub_dir))

jsfile.write("should_transfer_files = if_needed\n")
jsfile.write("when_to_transfer_output = on_exit\n")

if reqs != None:
    jsfile.write("requirements = %s\n" % (reqs))

u_inc = float(n)/float(submitters)
u_sum = 0.0
u_max = float(n)
u_cnt = 0
u = 0
j = 0
while j < submitters:
    u_sum += u_inc
    u = int(u_sum)
    u_sum -= float(u)

    # Handle corner cases from roundoff err.
    # Correction shouldn't actually exceed 1
    u_cnt += u
    if (j == (submitters-1)) and (u_cnt < n):
        d = n-u_cnt
        u += d
        u_cnt += d

    jsfile.write("+AccountingGroup = \"%s\"\n" % ("none.user%04d" % j))
    jsfile.write("queue %d\n" % (u))
    j += 1


jsfile.close()
print "submitting %d jobs via jsub file %s" % (u_cnt, jsfile_name)
# submit the file
rc = subprocess.call(["condor_submit", jsfile_name])
if rc == 0:
    print "submit was successful"
else:
    print "WARNING! submit failed with code %d" % rc
